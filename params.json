{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Introduction\r\n\r\nThere are many JavaScript libraries that are correctly and nicely implementing object-oriented approaches, but non of them provides these features only - _for example, adding AJAX capabilities, DOM manipulation, ..._ -\r\n\r\njOOPL is here to offer object-oriented programming and no more, just a tiny, simple and effective library that is going to support your JavaScript developments in the Web and anywhere.\r\n\r\n## Why jOOPL?\r\n\r\nWeb development is going forward at the same speed as the Web does itself. Now this is an internet of applications and this fact is affecting complexity. \r\n\r\nCurrently object-oriented programming has proven along lot of years that is a productive, near to human mind and cost-effective way of implementing small to large software solutions and, now, in the Web 2.0 and 3.0 times, software applications are more than a Web page showing information since current evolving paradigm is cloud computing, which enables devices, services and programs to connect themselves over the network.\r\n\r\nBut object-oriented approach has evolved in Web servers and Web clients are somehow using old ways of doing things, excepting selected and famous JavaScript libraries.\r\n\r\nThat is why jOOPL is here: a small and simple, but yet powerful library that gives developers the power of creating classes, interfaces, take advantage of inheritance, polymorphism and encapsulation, in order to take the Web to the next level with re-usable, scalable, well-written and easy-to-understand custom JavaScript objects. \r\n\r\n## Code sample\r\n\r\nHere is a sample usage of jOOPL. Greatly using inheritance, \"C\" class will print \"Hello world!\" by chaining \"SayHello\" method's implementations:\r\n\r\n          $namespace.register(\"jOOPL.Sample\");\r\n\r\n          jOOPL.Sample.A = $class.declare\r\n              (\r\n          // Constructor\r\n                  function (args) {\r\n                  },\r\n          // Methods\r\n                  {\r\n                  SayHello: function () {\r\n                      document.write(\"hello\");\r\n                  }\r\n              }\r\n              );\r\n\r\n          jOOPL.Sample.B = $class.declare\r\n              (\r\n                  function (args) {\r\n                  },\r\n                  {\r\n                      SayHello: function () {\r\n                          this.$base.SayHello();\r\n                          document.write(\" world\");\r\n                      }\r\n                  },\r\n                  jOOPL.Sample.A\r\n              );\r\n\r\n          jOOPL.Sample.IHelloable = $interface.declare(\r\n                  {\r\n                      SayHello: function () {\r\n                          throw $new(NotImplementedException);\r\n                      }\r\n                  }\r\n              );\r\n\r\n          $namespace.alias(jOOPL.Sample, \"Sample\");\r\n\r\n          Sample.C = $class.declare\r\n              (\r\n                  function (args) {\r\n                  },\r\n                  {\r\n                      SayHello: function () {\r\n                          this.$base.SayHello();\r\n                          document.write(\"!\");\r\n                      }\r\n                  },\r\n                  jOOPL.Sample.B,\r\n                  jOOPL.Sample.IHelloable\r\n              );\r\n\r\n          $namespace.using(\"jOOPL.Sample\");\r\n\r\n          var instance = $new(C);\r\n          instance.SayHello();","name":"jOOPL","google":"","tagline":"jOOPL is here to offer object-oriented programming and no more, just a tiny, simple and effective library that is going to support your JavaScript developments in the Web and anywhere."}